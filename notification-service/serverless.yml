service: notification-service

frameworkVersion: '2'


provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: '20201221'
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: "Allow"
      Action: "dynamodb:*"
      Resource: "*"
    - Effect: "Allow"
      Action: "sns:*"
      Resource: "*"
    - Effect: "Allow"
      Action: "events:*"
      Resource: "*"
  environment:
    SNS_TOPIC_ARN: { "Fn::Join" : ["", ["arn:aws:sns:${self:custom.region}:${self:custom.accountId}:${self:custom.alertDispatchTopic}" ] ]  }
    ORDERS_TABLE: ${self:provider.stage}-ecom-orders-table
    EVENT_SOURCE_NAME: ph.ecommerce.com
    EVENT_BUS_NAME:  ${self:provider.stage}-ecom-event-bus
    EVENT_BUS_ARN: arn:aws:events:${self:custom.region}:${self:custom.accountId}:event-bus/${self:provider.environment.EVENT_BUS_NAME}


functions:
  sendEmailNotification:
    handler: handlers/send_email_notification.handler
    events:
      - http:
          path: /users/{user_id}/notifications
          method: post
  
  sendEmailNotificationEighth:
    handler: handlers/send_email_notification.handler
    events:
      - eventBridge:
          eventBus: ${self:provider.environment.EVENT_BUS_ARN}
          pattern:
            source:
              - ${self:provider.environment.EVENT_SOURCE_NAME}
            detail-type:
              - order_delivered

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  alertDispatchTopic: "${self:service}-alert-dispatch-${self:custom.stage}"
  accountId: ${opt:accountId, ''}

resources:
  Resources:
    ManualApprovalSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.alertDispatchTopic}

    ManualApprovalSnsTopicSubscriptionOne:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        TopicArn: !Ref ManualApprovalSnsTopic
        Endpoint: raphael.jambalos@gmail.com

plugins:
  - serverless-offline
